<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Cuckooemm&#39;s Blog</title>
    <link>https://cuckooemm.xyz/posts/</link>
    <description>Recent content in Posts on Cuckooemm&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 01 Jun 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://cuckooemm.xyz/posts/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>LeetCode - 1 - Two Sum [Easy]</title>
      <link>https://cuckooemm.xyz/2019/june/1-two_sum/</link>
      <pubDate>Sat, 01 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://cuckooemm.xyz/2019/june/1-two_sum/</guid>
      <description>1.Tow Sum 地址
难度：Easy
题目描述 Given an array of integers, return indices of the two numbers such that they add up to a specific target.
You may assume that each input would have exactly one solution, and you may not use the same element twice.
给定一个整型数组，返回数组中值的和target的数组索引，可以假定每个输入都有一个解，且同一个元素不能使用两次。
示例 Given nums = [2, 7, 11, 15], target = 9,
Because nums[0] + nums[1] = 2 + 7 = 9,
return [0, 1].</description>
    </item>
    
    <item>
      <title>LeetCode - 2 - Add Two Numbers [Medium]</title>
      <link>https://cuckooemm.xyz/2019/june/2-add_two_number/</link>
      <pubDate>Sat, 01 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://cuckooemm.xyz/2019/june/2-add_two_number/</guid>
      <description>2.Add Two Numbers 地址
难度：Medium
题目描述 You are given two non-empty linked lists representing two non-negative integers. The digits are stored in reverse order and each of their nodes contain a single digit. Add the two numbers and return it as a linked list.
You may assume the two numbers do not contain any leading zero, except the number 0 itself.
给定两个非空链表用来表示两个非负整数，它们各自的位数是按照逆序的方式存储的，并且每个节点只能存储一位数字。用链表返回它们的和。
你可以假设它们都不会以0开头，除了数字0。
示例 Input: (2 -&amp;gt; 4 -&amp;gt; 3) + (5 -&amp;gt; 6 -&amp;gt; 4)</description>
    </item>
    
    <item>
      <title>LeetCode - 3 - Longest Substring Without Repeating Characters [Medium]</title>
      <link>https://cuckooemm.xyz/2019/june/3-longest_substring_without_repeating_characters/</link>
      <pubDate>Sat, 01 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://cuckooemm.xyz/2019/june/3-longest_substring_without_repeating_characters/</guid>
      <description>3.Longest Substring Without Repeating Characters 地址
难度：Medium
题目描述 Given a string, find the length of the longest substring without repeating characters.
给定一个字符串，找出不含重复字符的最长子串。
示例 Example 1 Input: &amp;ldquo;abcabcbb&amp;rdquo;
Output: 3
Explanation: The answer is &amp;ldquo;abc&amp;rdquo;, with the length of 3.
Example 2 Input: &amp;ldquo;bbbbb&amp;rdquo;
Output: 1
Explanation: The answer is &amp;ldquo;b&amp;rdquo;, with the length of 1.
Example 3 Input: &amp;ldquo;bbbbb&amp;rdquo;
Output: 1
Explanation: The answer is &amp;ldquo;b&amp;rdquo;, with the length of 1.</description>
    </item>
    
    <item>
      <title>Git(2)</title>
      <link>https://cuckooemm.xyz/2019/may/git2/</link>
      <pubDate>Sat, 25 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://cuckooemm.xyz/2019/may/git2/</guid>
      <description>分支 创建分支 -b 表示创建并切换
git checkout -b &amp;lt;name&amp;gt;  等同于
git branch &amp;lt;name&amp;gt; git checkout &amp;lt;name&amp;gt;  查看当前分支 git branch命令会列出所有分支，当前分支前面会标一个*号。
git branch  切换分支 git checkout &amp;lt;name&amp;gt;  合并分支 git merge &amp;lt;name&amp;gt;  git merge命令用于合并指定分支到当前分支。 Fast-forward 信息表示快进模式
git merge --no-ff -m &amp;quot;merge with no-ff&amp;quot; &amp;lt;name&amp;gt;  --no-ff参数，表示禁用Fast forward 因为本次合并要创建一个新的commit，所以加上-m参数，把commit描述写进去。
删除分支 git branch -d &amp;lt;name&amp;gt; git branch -D &amp;lt;name&amp;gt; //未合并过的分支删除  环境保存与恢复 保存现场 git stash  查看现场保存位置 git stash list  现场恢复  git stash apply 恢复现场但不删除记录，调用git stash drop删除 git stash pop 恢复且删除  git stash &amp;lt;apply or pop&amp;gt; &amp;lt;stash&amp;gt;  标签 创建标签 在当前分支打标签</description>
    </item>
    
    <item>
      <title>Git(1)</title>
      <link>https://cuckooemm.xyz/2019/may/git1/</link>
      <pubDate>Thu, 23 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://cuckooemm.xyz/2019/may/git1/</guid>
      <description>Git命令 写一下git的命令以便忘记时查找
获取帮助 git help &amp;lt;verb&amp;gt; git &amp;lt;verb&amp;gt; --help man git-&amp;lt;verv&amp;gt;  config  git config针对一个git仓库 git config &amp;ndash;global针对一个用户 sudo git config &amp;ndash;system针对一个系统，因为是针对整个系统的，所以必须使用sudo  个人信息 用于提交git时显示的个人信息
git config --global user.name &amp;quot;your name&amp;quot; git config --global user.email &amp;quot;your email&amp;quot;  仓库独立指定 git config user.name &amp;quot;your name&amp;quot; git config user.email &amp;quot;your email&amp;quot;  不加 - -global
配置编辑器 默认缺省编辑器 为vi or vim。 如想使用emacs
git config --global core.editor emacs  配置比较工具 用于解决合并时的冲突，如vimdiff
git config --global merge.</description>
    </item>
    
    <item>
      <title>Golang defer解析</title>
      <link>https://cuckooemm.xyz/2019/may/golang-defer%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Sat, 18 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://cuckooemm.xyz/2019/may/golang-defer%E8%A7%A3%E6%9E%90/</guid>
      <description>Golang defer解析 概念 在go语言中，defer 是用来在函数作用域结束之后执行函数的关键字，在当前函数返回前调用。延迟函数defer的实现是由编译器很运行时共同完成的。
作用域 func main() { { defer fmt.Println(&amp;quot;defer runs&amp;quot;) fmt.Println(&amp;quot;code block ends&amp;quot;) } fmt.Println(&amp;quot;func ends&amp;quot;) }  从这里我们可以看出，defer并不是在退出当前代码块的作用域之前执行的，defer只会在当前函数返回之前被调用。
defer规则 1、执行顺序 定义defer类似于入栈，defer的执行顺序类似于出栈，即先出现的defer最后执行。 例如在for循环中defer打印的结果为：4、3、2、1、0。
func main() { for i := 0; i &amp;lt; 5; i++ { defer fmt.Println(i) } }  defer的设计初衷是简化函数返回时资源清理的动作。 资源往往有依赖，如申请A资源，在A的基础上申请B资源，再在B的基础上申请C资源，资源的申请顺序为：A-&amp;gt;B-&amp;gt;C;释放时则需要反向进行：C-&amp;gt;B-&amp;gt;A。这就是把defer设计成FIFO的原因。
2、参数确定 Golang中所有的函数参数传递都是值传递，延迟函数的参数在defer定义时就已确定下来。
func main() { // main函数没有参数也没有返回值 i := 0 defer fmt.Println(i) i++ }  在defer定义时就已经把参数通过值传递传给了defer函数，在defer函数之后对参数i的操作并不会影响defer函数中的参数i的值，因此函数的打印结果为0。 接下来再看一段代码
func main(){ i := 0 defer func(i int) { fmt.</description>
    </item>
    
  </channel>
</rss>