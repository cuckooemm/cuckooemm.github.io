<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cuckooemm&#39;s Blog on Cuckooemm&#39;s Blog</title>
    <link>https://cuckooemm.xyz/</link>
    <description>Recent content in Cuckooemm&#39;s Blog on Cuckooemm&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Fri, 31 May 2019 00:00:00 +0000</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Git(2)</title>
      <link>https://cuckooemm.xyz/2019/may/git2/</link>
      <pubDate>Fri, 31 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://cuckooemm.xyz/2019/may/git2/</guid>
      <description>

&lt;h3 id=&#34;分支&#34;&gt;分支&lt;/h3&gt;

&lt;h4 id=&#34;创建分支&#34;&gt;创建分支&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;-b&lt;/code&gt; 表示创建并切换&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git checkout -b &amp;lt;name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;等同于&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git branch &amp;lt;name&amp;gt;
git checkout &amp;lt;name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;查看当前分支&#34;&gt;查看当前分支&lt;/h4&gt;

&lt;p&gt;&lt;code&gt;git branch&lt;/code&gt;命令会列出所有分支，当前分支前面会标一个&lt;code&gt;*&lt;/code&gt;号。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git branch
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;切换分支&#34;&gt;切换分支&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git checkout &amp;lt;name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;合并分支&#34;&gt;合并分支&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git merge &amp;lt;name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;git merge&lt;/code&gt;命令用于合并指定分支到当前分支。 &lt;code&gt;Fast-forward&lt;/code&gt; 信息表示快进模式&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git merge --no-ff -m &amp;quot;merge with no-ff&amp;quot; &amp;lt;name&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;--no-ff&lt;/code&gt;参数，表示禁用&lt;code&gt;Fast forward&lt;/code&gt;
因为本次合并要创建一个新的commit，所以加上&lt;code&gt;-m&lt;/code&gt;参数，把&lt;code&gt;commit&lt;/code&gt;描述写进去。&lt;/p&gt;

&lt;h4 id=&#34;删除分支&#34;&gt;删除分支&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git branch -d &amp;lt;name&amp;gt; 
git branch -D &amp;lt;name&amp;gt; //未合并过的分支删除
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;环境保存与恢复&#34;&gt;环境保存与恢复&lt;/h3&gt;

&lt;h4 id=&#34;保存现场&#34;&gt;保存现场&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git stash
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;查看现场保存位置&#34;&gt;查看现场保存位置&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git stash list
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;现场恢复&#34;&gt;现场恢复&lt;/h4&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;git stash apply&lt;/code&gt; 恢复现场但不删除记录，调用&lt;code&gt;git stash drop&lt;/code&gt;删除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git stash pop&lt;/code&gt; 恢复且删除&lt;/li&gt;
&lt;/ul&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git stash &amp;lt;apply or pop&amp;gt; &amp;lt;stash&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;标签&#34;&gt;标签&lt;/h3&gt;

&lt;h4 id=&#34;创建标签&#34;&gt;创建标签&lt;/h4&gt;

&lt;p&gt;在当前分支打标签&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git tag &amp;lt;tagname&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;指定commitid 打标签&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git tag  &amp;lt;tagname&amp;gt; &amp;lt;commitid&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;为标签添加说明&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git tag -a &amp;lt;tagname&amp;gt; -m &amp;quot;explain&amp;quot; &amp;lt;commitid&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;查看所有标签&#34;&gt;查看所有标签&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git tag 
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;查看标签信息&#34;&gt;查看标签信息&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git show &amp;lt;tagname&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;标签删除&#34;&gt;标签删除&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git tag -d &amp;lt;tagname&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h5 id=&#34;远程删除&#34;&gt;远程删除&lt;/h5&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git push &amp;lt;host&amp;gt; :refs/tags/&amp;lt;tagname&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;标签推送&#34;&gt;标签推送&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git push &amp;lt;host&amp;gt; &amp;lt;tagname&amp;gt;
git push &amp;lt;host&amp;gt; --tags // 推送所有
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Git(1)</title>
      <link>https://cuckooemm.xyz/2019/may/git1/</link>
      <pubDate>Thu, 23 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://cuckooemm.xyz/2019/may/git1/</guid>
      <description>

&lt;h2 id=&#34;git命令&#34;&gt;Git命令&lt;/h2&gt;

&lt;p&gt;写一下git的命令以便忘记时查找&lt;/p&gt;

&lt;h3 id=&#34;获取帮助&#34;&gt;获取帮助&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git help &amp;lt;verb&amp;gt;
git &amp;lt;verb&amp;gt; --help
man git-&amp;lt;verv&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;config&#34;&gt;config&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;git config针对一个git仓库&lt;/li&gt;
&lt;li&gt;git config &amp;ndash;global针对一个用户&lt;/li&gt;
&lt;li&gt;sudo git config &amp;ndash;system针对一个系统，因为是针对整个系统的，所以必须使用sudo&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;个人信息&#34;&gt;个人信息&lt;/h4&gt;

&lt;p&gt;用于提交git时显示的个人信息&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git config --global user.name &amp;quot;your name&amp;quot;
git config --global user.email &amp;quot;your email&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;仓库独立指定&#34;&gt;仓库独立指定&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git config user.name &amp;quot;your name&amp;quot;
git config user.email &amp;quot;your email&amp;quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;不加 - -global&lt;/p&gt;

&lt;h4 id=&#34;配置编辑器&#34;&gt;配置编辑器&lt;/h4&gt;

&lt;p&gt;默认缺省编辑器 为vi or vim。 如想使用emacs&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git config --global core.editor emacs
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;配置比较工具&#34;&gt;配置比较工具&lt;/h4&gt;

&lt;p&gt;用于解决合并时的冲突，如vimdiff&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git config --global merge.tool vimdiff
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;配置别名&#34;&gt;配置别名&lt;/h4&gt;

&lt;p&gt;如 git status 设置别名 st&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git config --global alias.st status
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;推荐设置别名&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git config --global alias.lg &amp;quot;log --color --graph --pretty=format:&#39;%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)&amp;lt;%an&amp;gt;%Creset&#39; --abbrev-commit&amp;quot; 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;输入&lt;code&gt;q&lt;/code&gt;退出&lt;/p&gt;

&lt;h4 id=&#34;检查配置&#34;&gt;检查配置&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git config --list
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;删除config-key值&#34;&gt;删除config key值&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git config --global --unset key
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;gitignore文件&#34;&gt;.gitignore文件&lt;/h4&gt;

&lt;p&gt;设置文件监控规则
文档描述gitignore语法规则有五条：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;忽略空白行或以#开始的行（注释）；&lt;/li&gt;
&lt;li&gt;按照标准glob工作，并递归应用于整个工作目录（参考glob）；&lt;/li&gt;
&lt;li&gt;模式以/打头，禁止递归工作；&lt;/li&gt;
&lt;li&gt;模式以/结尾，限定特定目录；&lt;/li&gt;
&lt;li&gt;使用感叹号!对模式含义取反；&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;gitignore规则细化补充如下：&lt;/p&gt;

&lt;ul&gt;
&lt;li&gt;通用的规则应该写在前面，专有的放后面。&lt;/li&gt;
&lt;li&gt;规则中不含有/的，则当作通配符处理，每个目录迭代检查；&lt;/li&gt;
&lt;li&gt;规则以/结尾的，仅限于目录，而不包含同名的链接和文件；&lt;/li&gt;
&lt;li&gt;模式以连续两个星号和/打头(**/)时，和移除**/含义相同；&lt;/li&gt;
&lt;li&gt;模式以连续两个型号结尾时，表示匹配其下一切内容，含子目录；&lt;/li&gt;
&lt;li&gt;模式中间包含/**/时，**匹配0个或多个目录；比如：&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;克隆git仓库到本地&#34;&gt;克隆git仓库到本地&lt;/h3&gt;

&lt;h4 id=&#34;clone&#34;&gt;clone&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git clone url //支持git、http(s)、ssh等协议
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;默认只有&lt;code&gt;master&lt;/code&gt;分支&lt;/p&gt;

&lt;h5 id=&#34;链接分支&#34;&gt;链接分支&lt;/h5&gt;

&lt;ul&gt;
&lt;li&gt;在本地创建和远程分支对应的分支，使用&lt;code&gt;git checkout -b branch-name origin/branch-name&lt;/code&gt;，本地和远程分支的名称最好一致&lt;/li&gt;
&lt;li&gt;建立本地分支和远程分支的关联，使用git branch &amp;ndash;set-upstream branch-name origin/branch-name&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&#34;fetch&#34;&gt;fetch&lt;/h4&gt;

&lt;p&gt;拉取远程更新到本地，可指定分支 对本地代码无影响&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git fetch &amp;lt;shortname&amp;gt; &amp;lt;分支名&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;pull&#34;&gt;pull&lt;/h4&gt;

&lt;p&gt;拉取远程分支的更新并合并 远程分支与当前分支合并可省略&lt;code&gt;:&lt;/code&gt;后部分&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git pull &amp;lt;shortname&amp;gt; &amp;lt;远程分之名&amp;gt;:&amp;lt;本地分支名&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;默认在本地分支与远程分支建立追踪关系
也可以手动建立追踪关系&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git branch --set-upstream &amp;lt;分支&amp;gt; \&amp;lt;分支&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果远程分支已删除 pull不会删除本地分支&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git pull -p //本地删除远程已删除的分支
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;push&#34;&gt;push&lt;/h4&gt;

&lt;p&gt;推送本地更新，与 pull相仿
如果远程分支不存在，则新建&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git push &amp;lt;shortname&amp;gt; &amp;lt;本地分支&amp;gt;:&amp;lt;远程分支&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;省略本地分支名 等于删除远程分支&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git push &amp;lt;shortname&amp;gt; :&amp;lt;远程分支&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;等同&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git push &amp;lt;shortname&amp;gt; --delete master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;如果存在多个远程追踪关系，使用&lt;code&gt;-u&lt;/code&gt;指定一个默认主机&lt;/p&gt;

&lt;h3 id=&#34;添加文件&#34;&gt;添加文件&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git add .  // 把所有变化提交到暂存区 包括修改和新建 不包括删除
git add -u // 把添加的文件中修改的文件提交到暂存区(包含删除) 不添加新文件
git add -A // all
git add &amp;lt;file&amp;gt;... // 可添加多个文件
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;a href=&#34;https://git-scm.com/docs/git-add&#34; rel=&#34;nofollow noreferrer&#34; target=&#34;_blank&#34;&gt;官网文档&lt;/a&gt;&lt;/p&gt;

&lt;h3 id=&#34;查看当前文件状态&#34;&gt;查看当前文件状态&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git status
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;查看已暂存和未暂存的更改&#34;&gt;查看已暂存和未暂存的更改&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git diff
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;以暂存的和上次提交的更改&#34;&gt;以暂存的和上次提交的更改&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git diff --cached 
git diff --staged
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;提交&#34;&gt;提交&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git commit //启动默认编辑器输入更新说明
git commit -m &amp;quot;更新内容&amp;quot; // 加-m 在之后输入更新说明
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;跳过使用暂存区域&#34;&gt;跳过使用暂存区域&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git commit -a // 跳过 add 步骤
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;移除文件&#34;&gt;移除文件&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;&lt;code&gt;rm &amp;lt;file&amp;gt;...&lt;/code&gt;
移除版本控制并从工作目录中删除&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git rm -f &amp;lt;file&amp;gt;...&lt;/code&gt;
移除已添加到暂存区的文件&lt;/li&gt;
&lt;li&gt;&lt;code&gt;git rm --cached &amp;lt;file&amp;gt;&lt;/code&gt;
不进行版本控制但保留文件&lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&#34;移动文件-or-改名&#34;&gt;移动文件 or 改名&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git mv file_from file_to 
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;运行&lt;code&gt;git mv&lt;/code&gt;相当于下面三条命令&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;mv README.txt README
git rm README.txt
git add README
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;撤销修改&#34;&gt;撤销修改&lt;/h3&gt;

&lt;p&gt;使文件回到最后一次&lt;code&gt;add&lt;/code&gt; or &lt;code&gt;commit&lt;/code&gt; 时的状态&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git checkout -- &amp;lt;file&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;版本回退&#34;&gt;版本回退&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git log  查看记录
&lt;/code&gt;&lt;/pre&gt;

&lt;ul&gt;
&lt;li&gt;HEAD 表示当前版本&lt;/li&gt;
&lt;li&gt;上一个为 HEAD^&lt;/li&gt;
&lt;li&gt;上上个为 HEAD^^&lt;/li&gt;
&lt;li&gt;上100个为 HEAD~100&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;也可指定回退版本的commitid
&lt;code&gt;--hard&lt;/code&gt; 彻底回退到某个版本
&lt;code&gt;--soft&lt;/code&gt; 只回退 commit 信息&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git rest --hard HEAD^
&lt;/code&gt;&lt;/pre&gt;

&lt;h3 id=&#34;撤销回退&#34;&gt;撤销回退&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git rest --hard commitid
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;git reflog&lt;/code&gt; 记录HEAD的修改&lt;/p&gt;

&lt;h3 id=&#34;远程库管理&#34;&gt;远程库管理&lt;/h3&gt;

&lt;h4 id=&#34;列出管理的远程库&#34;&gt;列出管理的远程库&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git remote -v 
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;本地关联远程库&#34;&gt;本地关联远程库&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git remote add &amp;lt;shortname&amp;gt; url
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;远程库重命名&#34;&gt;远程库重命名&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git remote rename &amp;lt;oldname&amp;gt; &amp;lt;newname&amp;gt;
&lt;/code&gt;&lt;/pre&gt;

&lt;h4 id=&#34;删除关联远程库&#34;&gt;删除关联远程库&lt;/h4&gt;

&lt;pre&gt;&lt;code class=&#34;language-git&#34;&gt;git remote rm &amp;lt;shortname&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://cuckooemm.xyz/about/</link>
      <pubDate>Sat, 18 May 2019 17:02:29 +0800</pubDate>
      
      <guid>https://cuckooemm.xyz/about/</guid>
      <description>

&lt;h1 id=&#34;about-me&#34;&gt;About me&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Cuckooemm&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;cuckooemm@gmail.com&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>Golang defer解析</title>
      <link>https://cuckooemm.xyz/2019/may/golang-defer%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Sat, 18 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://cuckooemm.xyz/2019/may/golang-defer%E8%A7%A3%E6%9E%90/</guid>
      <description>

&lt;h1 id=&#34;golang-defer解析&#34;&gt;Golang defer解析&lt;/h1&gt;

&lt;h3 id=&#34;概念&#34;&gt;概念&lt;/h3&gt;

&lt;p&gt;在go语言中，&lt;code&gt;defer&lt;/code&gt; 是用来在&lt;strong&gt;函数作用域结束之后执行函数的关键字&lt;/strong&gt;，在当前函数返回前调用。延迟函数&lt;code&gt;defer&lt;/code&gt;的实现是由编译器很运行时共同完成的。&lt;/p&gt;

&lt;h3 id=&#34;作用域&#34;&gt;作用域&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;func main() {
    {
        defer fmt.Println(&amp;quot;defer runs&amp;quot;)
        fmt.Println(&amp;quot;code block ends&amp;quot;)
    }
    
    fmt.Println(&amp;quot;func ends&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从这里我们可以看出，&lt;code&gt;defer&lt;/code&gt;并不是在退出当前代码块的作用域之前执行的，&lt;code&gt;defer&lt;/code&gt;只会在当前函数返回之前被调用。&lt;/p&gt;

&lt;h3 id=&#34;defer规则&#34;&gt;defer规则&lt;/h3&gt;

&lt;h4 id=&#34;1-执行顺序&#34;&gt;1、执行顺序&lt;/h4&gt;

&lt;p&gt;定义&lt;code&gt;defer&lt;/code&gt;类似于入栈，&lt;code&gt;defer&lt;/code&gt;的执行顺序类似于出栈，即先出现的&lt;code&gt;defer&lt;/code&gt;最后执行。
例如在&lt;code&gt;for&lt;/code&gt;循环中&lt;code&gt;defer&lt;/code&gt;打印的结果为：4、3、2、1、0。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;func main() {
    for i := 0; i &amp;lt; 5; i++ {
        defer fmt.Println(i)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;defer&lt;/code&gt;的设计初衷是简化函数返回时资源清理的动作。
资源往往有依赖，如申请A资源，在A的基础上申请B资源，再在B的基础上申请C资源，资源的申请顺序为：A-&amp;gt;B-&amp;gt;C;释放时则需要反向进行：C-&amp;gt;B-&amp;gt;A。这就是把&lt;code&gt;defer&lt;/code&gt;设计成&lt;strong&gt;FIFO&lt;/strong&gt;的原因。&lt;/p&gt;

&lt;h4 id=&#34;2-参数确定&#34;&gt;2、参数确定&lt;/h4&gt;

&lt;p&gt;Golang中所有的函数参数传递都是值传递，延迟函数的参数在&lt;code&gt;defer&lt;/code&gt;定义时就已确定下来。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;func main() {  // main函数没有参数也没有返回值
    i := 0 
    defer fmt.Println(i)
    i++
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在&lt;code&gt;defer&lt;/code&gt;定义时就已经把参数通过值传递传给了&lt;code&gt;defer&lt;/code&gt;函数，在&lt;code&gt;defer&lt;/code&gt;函数之后对参数i的操作并不会影响&lt;code&gt;defer&lt;/code&gt;函数中的参数i的值，因此函数的打印结果为0。
接下来再看一段代码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;func main(){
    i := 0
    defer func(i int) {
        fmt.Println(&amp;amp;i) 结果为0xc00000a0d8
    }(i)
    fmt.Println(&amp;amp;i)  // 结果为0xc00000a0d0
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从这里可以看出&lt;code&gt;defer&lt;/code&gt;中的参数&lt;strong&gt;i&lt;/strong&gt;与代码中的参数&lt;strong&gt;i&lt;/strong&gt;已经不是一个参数了。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;func main() {
    var i *int
    i = new(int) // 申请内存
    *i = 0
    defer func(i *int) {
        fmt.Println(i) // 结果为 0xc000062080
        fmt.Println(*i) // 结果为1
    }(i)
    *i++
    fmt.Println(i) // 结果为 0xc000062080
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对于指针类型，延迟函数的参数是一个地址值，而在这样的情况下，&lt;code&gt;defer&lt;/code&gt;后面的语句对变量的修改可能会影响延迟函数的参数值，而&lt;code&gt;defer&lt;/code&gt;函数中的指针参数与&lt;code&gt;defer&lt;/code&gt;外的指针参数又是两个不同的变量，也就是说为指针赋予新的地址值同样不会影响&lt;code&gt;defer&lt;/code&gt;中的指针值。&lt;/p&gt;

&lt;h4 id=&#34;3-延迟函数可能操作主函数的具名返回值&#34;&gt;3、延迟函数可能操作主函数的具名返回值&lt;/h4&gt;

&lt;p&gt;函数返回的&lt;code&gt;return&lt;/code&gt;语句并不是一个原子操作，实际上&lt;code&gt;return&lt;/code&gt;只代理汇编指令&lt;code&gt;ret&lt;/code&gt;，即跳转程序执行。
如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;return i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;实际上分两部执行，即将&lt;strong&gt;i&lt;/strong&gt;值存入栈中作为返回值，然后执行跳转，而&lt;code&gt;defer&lt;/code&gt;的执行时机正是跳转前，所以说defer执行时是有机会操作返回值的。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;func deferFuncReturn() (result int) {
    i := 1

    defer func() {
       result++
    }()

    return i
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;该函数的&lt;code&gt;return&lt;/code&gt;语句可以拆分成下面两行&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;result = i
return
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;延迟函数的执行正是&lt;code&gt;return&lt;/code&gt;之前，加入&lt;code&gt;defer&lt;/code&gt;后的执行过程如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;result = i
result++
return
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;函数实际返回i++的值。&lt;/p&gt;

&lt;h3 id=&#34;应用场景&#34;&gt;应用场景&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;关闭文件描述符&lt;/li&gt;
&lt;li&gt;关闭数据库连接&lt;/li&gt;
&lt;li&gt;资源解锁&lt;/li&gt;
&lt;li&gt;recover捕获错误&lt;/li&gt;
&lt;li&gt;等&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>