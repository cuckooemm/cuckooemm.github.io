<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Cuckooemm&#39;s Blog on Cuckooemm&#39;s Blog</title>
    <link>https://cuckooemm.xyz/</link>
    <description>Recent content in Cuckooemm&#39;s Blog on Cuckooemm&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sat, 18 May 2019 22:17:27 +0800</lastBuildDate>
    <atom:link href="/" rel="self" type="application/rss+xml" />
    
    <item>
      <title>Golang defer解析</title>
      <link>https://cuckooemm.xyz/2019/may/golang-defer%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Sat, 18 May 2019 22:17:27 +0800</pubDate>
      
      <guid>https://cuckooemm.xyz/2019/may/golang-defer%E8%A7%A3%E6%9E%90/</guid>
      <description>

&lt;h1 id=&#34;golang-defer解析&#34;&gt;Golang defer解析&lt;/h1&gt;

&lt;h3 id=&#34;概念&#34;&gt;概念&lt;/h3&gt;

&lt;p&gt;在go语言中，&lt;code&gt;defer&lt;/code&gt; 是用来在&lt;strong&gt;函数作用域结束之后执行函数的关键字&lt;/strong&gt;，在当前函数返回前调用。延迟函数&lt;code&gt;defer&lt;/code&gt;的实现是由编译器很运行时共同完成的。&lt;/p&gt;

&lt;h3 id=&#34;作用域&#34;&gt;作用域&lt;/h3&gt;

&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;func main() {
    {
        defer fmt.Println(&amp;quot;defer runs&amp;quot;)
        fmt.Println(&amp;quot;code block ends&amp;quot;)
    }
    
    fmt.Println(&amp;quot;func ends&amp;quot;)
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从这里我们可以看出，&lt;code&gt;defer&lt;/code&gt;并不是在退出当前代码块的作用域之前执行的，&lt;code&gt;defer&lt;/code&gt;只会在当前函数返回之前被调用。&lt;/p&gt;

&lt;h3 id=&#34;defer规则&#34;&gt;defer规则&lt;/h3&gt;

&lt;h4 id=&#34;1-执行顺序&#34;&gt;1、执行顺序&lt;/h4&gt;

&lt;p&gt;定义&lt;code&gt;defer&lt;/code&gt;类似于入栈，&lt;code&gt;defer&lt;/code&gt;的执行顺序类似于出栈，即先出现的&lt;code&gt;defer&lt;/code&gt;最后执行。
例如在&lt;code&gt;for&lt;/code&gt;循环中&lt;code&gt;defer&lt;/code&gt;打印的结果为：4、3、2、1、0。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;func main() {
    for i := 0; i &amp;lt; 5; i++ {
        defer fmt.Println(i)
    }
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;code&gt;defer&lt;/code&gt;的设计初衷是简化函数返回时资源清理的动作。
资源往往有依赖，如申请A资源，在A的基础上申请B资源，再在B的基础上申请C资源，资源的申请顺序为：A-&amp;gt;B-&amp;gt;C;释放时则需要反向进行：C-&amp;gt;B-&amp;gt;A。这就是把&lt;code&gt;defer&lt;/code&gt;设计成&lt;strong&gt;FIFO&lt;/strong&gt;的原因。&lt;/p&gt;

&lt;h4 id=&#34;2-参数确定&#34;&gt;2、参数确定&lt;/h4&gt;

&lt;p&gt;Golang中所有的函数参数传递都是值传递，延迟函数的参数在&lt;code&gt;defer&lt;/code&gt;定义时就已确定下来。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;func main() {  // main函数没有参数也没有返回值
    i := 0 
    defer fmt.Println(i)
    i++
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;在&lt;code&gt;defer&lt;/code&gt;定义时就已经把参数通过值传递传给了&lt;code&gt;defer&lt;/code&gt;函数，在&lt;code&gt;defer&lt;/code&gt;函数之后对参数i的操作并不会影响&lt;code&gt;defer&lt;/code&gt;函数中的参数i的值，因此函数的打印结果为0。
接下来再看一段代码&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;func main(){
    i := 0
    defer func(i int) {
        fmt.Println(&amp;amp;i) 结果为0xc00000a0d8
    }(i)
    fmt.Println(&amp;amp;i)  // 结果为0xc00000a0d0
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;从这里可以看出&lt;code&gt;defer&lt;/code&gt;中的参数&lt;strong&gt;i&lt;/strong&gt;与代码中的参数&lt;strong&gt;i&lt;/strong&gt;已经不是一个参数了。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;func main() {
    var i *int
    i = new(int) // 申请内存
    *i = 0
    defer func(i *int) {
        fmt.Println(i) // 结果为 0xc000062080
        fmt.Println(*i) // 结果为1
    }(i)
    *i++
    fmt.Println(i) // 结果为 0xc000062080
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;对于指针类型，延迟函数的参数是一个地址值，而在这样的情况下，&lt;code&gt;defer&lt;/code&gt;后面的语句对变量的修改可能会影响延迟函数的参数值，而&lt;code&gt;defer&lt;/code&gt;函数中的指针参数与&lt;code&gt;defer&lt;/code&gt;外的指针参数又是两个不同的变量，也就是说为指针赋予新的地址值同样不会影响&lt;code&gt;defer&lt;/code&gt;中的指针值。&lt;/p&gt;

&lt;h4 id=&#34;3-延迟函数可能操作主函数的具名返回值&#34;&gt;3、延迟函数可能操作主函数的具名返回值&lt;/h4&gt;

&lt;p&gt;函数返回的&lt;code&gt;return&lt;/code&gt;语句并不是一个原子操作，实际上&lt;code&gt;return&lt;/code&gt;只代理汇编指令&lt;code&gt;ret&lt;/code&gt;，即跳转程序执行。
如&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;return i
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;实际上分两部执行，即将&lt;strong&gt;i&lt;/strong&gt;值存入栈中作为返回值，然后执行跳转，而&lt;code&gt;defer&lt;/code&gt;的执行时机正是跳转前，所以说defer执行时是有机会操作返回值的。&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;func deferFuncReturn() (result int) {
    i := 1

    defer func() {
       result++
    }()

    return i
}
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;该函数的&lt;code&gt;return&lt;/code&gt;语句可以拆分成下面两行&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;result = i
return
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;延迟函数的执行正是&lt;code&gt;return&lt;/code&gt;之前，加入&lt;code&gt;defer&lt;/code&gt;后的执行过程如下&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-golang&#34;&gt;result = i
result++
return
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;函数实际返回i++的值。&lt;/p&gt;

&lt;h3 id=&#34;应用场景&#34;&gt;应用场景&lt;/h3&gt;

&lt;ul&gt;
&lt;li&gt;关闭文件描述符&lt;/li&gt;
&lt;li&gt;关闭数据库连接&lt;/li&gt;
&lt;li&gt;资源解锁&lt;/li&gt;
&lt;li&gt;recover捕获错误&lt;/li&gt;
&lt;li&gt;等&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
    <item>
      <title>About</title>
      <link>https://cuckooemm.xyz/about/</link>
      <pubDate>Sat, 18 May 2019 17:02:29 +0800</pubDate>
      
      <guid>https://cuckooemm.xyz/about/</guid>
      <description>

&lt;h1 id=&#34;about-me&#34;&gt;About me&lt;/h1&gt;

&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Cuckooemm&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;cuckooemm@gmail.com&lt;/p&gt;&lt;/li&gt;

&lt;li&gt;&lt;p&gt;一位计算机爱好者&lt;/p&gt;&lt;/li&gt;
&lt;/ul&gt;
</description>
    </item>
    
  </channel>
</rss>