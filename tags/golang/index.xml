<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>golang on Cuckooemm&#39;s Blog</title>
    <link>https://cuckooemm.xyz/tags/golang/</link>
    <description>Recent content in golang on Cuckooemm&#39;s Blog</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>zh-CN</language>
    <lastBuildDate>Sun, 09 Jun 2019 00:00:00 +0000</lastBuildDate>
    
	<atom:link href="https://cuckooemm.xyz/tags/golang/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Golang 内存对齐</title>
      <link>https://cuckooemm.xyz/2019/june/golang-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/</link>
      <pubDate>Sun, 09 Jun 2019 00:00:00 +0000</pubDate>
      
      <guid>https://cuckooemm.xyz/2019/june/golang-%E5%86%85%E5%AD%98%E5%AF%B9%E9%BD%90/</guid>
      <description>Golang 内存对齐 golang结构体中变量的顺序不同为结构体分配的内存大小也不同。
先来看一个例子：
type Part1 struct { a bool b int32 c int8 d int64 e byte }   bool 一个字节 int32 四个字节 int8 一个字节 int64 八个字节 byte 一个字节  所以应分配的内存空间为1 + 4 + 1 + 8 + 1 = 15个字节。
type Part1 struct { a bool b int32 c int8 d int64 e byte } func main() { part1 := Part1{} fmt.Printf(&amp;quot;part1 size: %d, align: %d\n&amp;quot;, unsafe.</description>
    </item>
    
    <item>
      <title>Golang defer解析</title>
      <link>https://cuckooemm.xyz/2019/may/golang-defer%E8%A7%A3%E6%9E%90/</link>
      <pubDate>Sat, 18 May 2019 00:00:00 +0000</pubDate>
      
      <guid>https://cuckooemm.xyz/2019/may/golang-defer%E8%A7%A3%E6%9E%90/</guid>
      <description>Golang defer解析 概念 在go语言中，defer 是用来在函数作用域结束之后执行函数的关键字，在当前函数返回前调用。延迟函数defer的实现是由编译器很运行时共同完成的。
作用域 func main() { { defer fmt.Println(&amp;quot;defer runs&amp;quot;) fmt.Println(&amp;quot;code block ends&amp;quot;) } fmt.Println(&amp;quot;func ends&amp;quot;) }  从这里我们可以看出，defer并不是在退出当前代码块的作用域之前执行的，defer只会在当前函数返回之前被调用。
defer规则 1、执行顺序 定义defer类似于入栈，defer的执行顺序类似于出栈，即先出现的defer最后执行。 例如在for循环中defer打印的结果为：4、3、2、1、0。
func main() { for i := 0; i &amp;lt; 5; i++ { defer fmt.Println(i) } }  defer的设计初衷是简化函数返回时资源清理的动作。
资源往往有依赖，如申请A资源，在A的基础上申请B资源，再在B的基础上申请C资源，资源的申请顺序为：A-&amp;gt;B-&amp;gt;C;释放时则需要反向进行：C-&amp;gt;B-&amp;gt;A。这就是把defer设计成FIFO的原因。
2、参数确定 Golang中所有的函数参数传递都是值传递，延迟函数的参数在defer定义时就已确定下来。
func main() { // main函数没有参数也没有返回值 i := 0 defer fmt.Println(i) i++ }  在defer定义时就已经把参数通过值传递传给了defer函数，在defer函数之后对参数i的操作并不会影响defer函数中的参数i的值，因此函数的打印结果为0。
接下来再看一段代码
func main(){ i := 0 defer func(i int) { fmt.</description>
    </item>
    
  </channel>
</rss>